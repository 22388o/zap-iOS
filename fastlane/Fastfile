# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

default_platform(:ios)

app_identifier = ["com.jackmallers.zap", "com.jackmallers.zap.Sticker", "com.jackmallers.zap.Widget"]

desc "Update build number."
lane :build_number do
  new_build_number = Time.now.strftime("%Y.%m.%d.%H.%M")
  increment_build_number(build_number: new_build_number)
end

desc "Update app version."
lane :change_version do |options|
  if version = options[:version] 
    increment_version_number(version_number: version)
  else 
    version = prompt(text: "Please enter the version number: ")
  end
  increment_version_number(version_number: version)
end

private_lane :pre_upload do
  ensure_bundle_exec
  sh("python3 check_localizable.py")
  ensure_git_status_clean
end

def check_release_branch(prefix)
  branch = git_branch
  branch_parts = branch.split('-')
  if branch_parts.count != 2 || branch_parts[0] != prefix
    UI.user_error!("only release from a release branch (e.g. release/testflight-0.4.0)")
  end 
end

desc "Builds new Alpha Build with local lnd enabled and uploads it to Testflight."
lane :alpha do
  pre_upload
  check_release_branch('release/testflight')

  update_app_icon(image: 'logo_alpha.png')

  increment_build_number(build_number:
    latest_testflight_build_number(
      initial_build_number: 0
    ) + 1
  )

  sync_code_signing(
    username: ENV['ITUNESCONNECT_USER'],
    app_identifier: app_identifier,
    type: "appstore"
  )

  build_ios_app(
    workspace: "Zap.xcworkspace",
    scheme: "Zap",
    configuration: "Debug",
    output_directory: "./builds/alpha",
    export_method: "app-store"
  )

  upload_to_testflight(
    username: ENV['ITUNESCONNECT_USER'],
    skip_waiting_for_build_processing: true
  )

  add_git_tag

  slack(
    message: "Just uploaded a new iOS alpha to Testflight",
    use_webhook_configured_username_and_icon: true,
    default_payloads: []
  )

  sh("git reset --hard")
end

desc "Release"
lane :release do
  pre_upload
  check_release_branch('release/appstore')

  version = get_version_number(
    xcodeproj: "Zap.xcodeproj",
    target: "Zap"
  )

  increment_build_number(build_number:
    app_store_build_number(
      live: false,
      initial_build_number: 0,
      version: version
    ) + 1
  )

  sync_code_signing(
    username: ENV['ITUNESCONNECT_USER'],
    app_identifier: app_identifier,
    type: "appstore"
  )

  build_ios_app(
    workspace: "Zap.xcworkspace",
    scheme: "Zap",
    configuration: "Release",
    output_directory: "./builds/appstore",
    export_method: "app-store"
  )

  upload_to_app_store(
    username: ENV['ITUNESCONNECT_USER'],
    skip_metadata: true,
    skip_screenshots: true
  )

  add_git_tag

  slack(
    message: "Just uploaded a new iOS verstion to the app store",
    use_webhook_configured_username_and_icon: true,
    default_payloads: []
  )

  sh("git reset --hard")
end

desc "Generate new app icon assets."
lane :update_app_icon do |options|
  if option_image = options[:image]
    image = option_image
  else
    image = 'logo.png'
  end
  appicon(
    appicon_image_file: image,
    appicon_path: 'Zap/Assets.xcassets',
    appicon_devices: [:iphone, :ios_marketing]
  )
end

desc "Run all tests."
lane :tests do
  swiftlint()
  
  run_tests(
    workspace: "Zap.xcworkspace",
    configuration: "DebugRemote",
    devices: ["iPhone 8"],
    scheme: "Zap",
    slack_only_on_failure: true,
    code_coverage: true
  )
end

lane :screenshots do
  capture_ios_screenshots(
    number_of_retries: 0,
    stop_after_first_error: true
  )
end

lane :upload_screenshots do
  upload_to_app_store(
    username: ENV['ITUNESCONNECT_USER'],
    skip_binary_upload: true,
    skip_metadata: true
  )
end

lane :upload_metadata do
  upload_to_app_store(
    username: ENV['ITUNESCONNECT_USER'],
    skip_binary_upload: true,
    skip_screenshots: true
  )
end
