//
// DO NOT EDIT.
//
// Generated by `protoc-gen-zap`.
// Source: rpc.proto
//

#if !REMOTEONLY
import Lndmobile
#endif
import Logger
final class RestWalletUnlockerConnection: WalletUnlockerConnection {
    private let lndRest: LNDRest
    
    init(lndRest: LNDRest) {
        self.lndRest = lndRest
    }
    
    func genSeed(_ request: Lnrpc_GenSeedRequest, completion: @escaping ApiCompletion<Lnrpc_GenSeedResponse>) {
        lndRest.run(method: .get, path: "/v1/genseed", data: nil, completion: completion)
    }
    
    func initWallet(_ request: Lnrpc_InitWalletRequest, completion: @escaping ApiCompletion<Lnrpc_InitWalletResponse>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/initwallet", data: json, completion: completion)
    }
    
    func unlockWallet(_ request: Lnrpc_UnlockWalletRequest, completion: @escaping ApiCompletion<Lnrpc_UnlockWalletResponse>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/unlockwallet", data: json, completion: completion)
    }
    
    func changePassword(_ request: Lnrpc_ChangePasswordRequest, completion: @escaping ApiCompletion<Lnrpc_ChangePasswordResponse>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/changepassword", data: json, completion: completion)
    }
    
}
final class RestLightningConnection: LightningConnection {
    private let lndRest: LNDRest
    
    init(lndRest: LNDRest) {
        self.lndRest = lndRest
    }
    
    func walletBalance(_ request: Lnrpc_WalletBalanceRequest, completion: @escaping ApiCompletion<Lnrpc_WalletBalanceResponse>) {
        lndRest.run(method: .get, path: "/v1/balance/blockchain", data: nil, completion: completion)
    }
    
    func channelBalance(_ request: Lnrpc_ChannelBalanceRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelBalanceResponse>) {
        lndRest.run(method: .get, path: "/v1/balance/channels", data: nil, completion: completion)
    }
    
    func getTransactions(_ request: Lnrpc_GetTransactionsRequest, completion: @escaping ApiCompletion<Lnrpc_TransactionDetails>) {
        lndRest.run(method: .get, path: "/v1/transactions", data: nil, completion: completion)
    }
    
    func estimateFee(_ request: Lnrpc_EstimateFeeRequest, completion: @escaping ApiCompletion<Lnrpc_EstimateFeeResponse>) {
        lndRest.run(method: .get, path: "/v1/transactions/fee", data: nil, completion: completion)
    }
    
    func sendCoins(_ request: Lnrpc_SendCoinsRequest, completion: @escaping ApiCompletion<Lnrpc_SendCoinsResponse>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/transactions", data: json, completion: completion)
    }
    
    func listUnspent(_ request: Lnrpc_ListUnspentRequest, completion: @escaping ApiCompletion<Lnrpc_ListUnspentResponse>) {
        lndRest.run(method: .get, path: "/v1/utxos", data: nil, completion: completion)
    }
    
    func subscribeTransactions(_ request: Lnrpc_GetTransactionsRequest, completion: @escaping ApiCompletion<Lnrpc_Transaction>) {
        Logger.error("SubscribeTransactions not implemented", customPrefix: "ðŸ“º")
    }
    
    func sendMany(_ request: Lnrpc_SendManyRequest, completion: @escaping ApiCompletion<Lnrpc_SendManyResponse>) {
        Logger.error("SendMany not implemented", customPrefix: "ðŸ“º")
    }
    
    func newAddress(_ request: Lnrpc_NewAddressRequest, completion: @escaping ApiCompletion<Lnrpc_NewAddressResponse>) {
        lndRest.run(method: .get, path: "/v1/newaddress", data: nil, completion: completion)
    }
    
    func signMessage(_ request: Lnrpc_SignMessageRequest, completion: @escaping ApiCompletion<Lnrpc_SignMessageResponse>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/signmessage", data: json, completion: completion)
    }
    
    func verifyMessage(_ request: Lnrpc_VerifyMessageRequest, completion: @escaping ApiCompletion<Lnrpc_VerifyMessageResponse>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/verifymessage", data: json, completion: completion)
    }
    
    func connectPeer(_ request: Lnrpc_ConnectPeerRequest, completion: @escaping ApiCompletion<Lnrpc_ConnectPeerResponse>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/peers", data: json, completion: completion)
    }
    
    func disconnectPeer(_ request: Lnrpc_DisconnectPeerRequest, completion: @escaping ApiCompletion<Lnrpc_DisconnectPeerResponse>) {
        lndRest.run(method: .delete, path: "/v1/peers/\(request.pubKey)", data: nil, completion: completion)
    }
    
    func listPeers(_ request: Lnrpc_ListPeersRequest, completion: @escaping ApiCompletion<Lnrpc_ListPeersResponse>) {
        lndRest.run(method: .get, path: "/v1/peers", data: nil, completion: completion)
    }
    
    func getInfo(_ request: Lnrpc_GetInfoRequest, completion: @escaping ApiCompletion<Lnrpc_GetInfoResponse>) {
        lndRest.run(method: .get, path: "/v1/getinfo", data: nil, completion: completion)
    }
    
    func pendingChannels(_ request: Lnrpc_PendingChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_PendingChannelsResponse>) {
        lndRest.run(method: .get, path: "/v1/channels/pending", data: nil, completion: completion)
    }
    
    func listChannels(_ request: Lnrpc_ListChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_ListChannelsResponse>) {
        lndRest.run(method: .get, path: "/v1/channels", data: nil, completion: completion)
    }
    
    func subscribeChannelEvents(_ request: Lnrpc_ChannelEventSubscription, completion: @escaping ApiCompletion<Lnrpc_ChannelEventUpdate>) {
        Logger.error("SubscribeChannelEvents not implemented", customPrefix: "ðŸ“º")
    }
    
    func closedChannels(_ request: Lnrpc_ClosedChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_ClosedChannelsResponse>) {
        lndRest.run(method: .get, path: "/v1/channels/closed", data: nil, completion: completion)
    }
    
    func openChannelSync(_ request: Lnrpc_OpenChannelRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelPoint>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/channels", data: json, completion: completion)
    }
    
    func openChannel(_ request: Lnrpc_OpenChannelRequest, completion: @escaping ApiCompletion<Lnrpc_OpenStatusUpdate>) {
        Logger.error("OpenChannel not implemented", customPrefix: "ðŸ“º")
    }
    
    func closeChannel(_ request: Lnrpc_CloseChannelRequest, completion: @escaping ApiCompletion<Lnrpc_CloseStatusUpdate>) {
        lndRest.run(method: .delete, path: "/v1/channels/\(request.channelPoint.fundingTxidStr)/\(request.channelPoint.outputIndex)", data: nil, completion: completion)
    }
    
    func abandonChannel(_ request: Lnrpc_AbandonChannelRequest, completion: @escaping ApiCompletion<Lnrpc_AbandonChannelResponse>) {
        lndRest.run(method: .delete, path: "/v1/channels/abandon/\(request.channelPoint.fundingTxidStr)/\(request.channelPoint.outputIndex)", data: nil, completion: completion)
    }
    
    func sendPayment(_ request: Lnrpc_SendRequest, completion: @escaping ApiCompletion<Lnrpc_SendResponse>) {
        Logger.error("SendPayment not implemented", customPrefix: "ðŸ“º")
    }
    
    func sendPaymentSync(_ request: Lnrpc_SendRequest, completion: @escaping ApiCompletion<Lnrpc_SendResponse>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/channels/transactions", data: json, completion: completion)
    }
    
    func sendToRoute(_ request: Lnrpc_SendToRouteRequest, completion: @escaping ApiCompletion<Lnrpc_SendResponse>) {
        Logger.error("SendToRoute not implemented", customPrefix: "ðŸ“º")
    }
    
    func sendToRouteSync(_ request: Lnrpc_SendToRouteRequest, completion: @escaping ApiCompletion<Lnrpc_SendResponse>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/channels/transactions/route", data: json, completion: completion)
    }
    
    func addInvoice(_ request: Lnrpc_Invoice, completion: @escaping ApiCompletion<Lnrpc_AddInvoiceResponse>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/invoices", data: json, completion: completion)
    }
    
    func listInvoices(_ request: Lnrpc_ListInvoiceRequest, completion: @escaping ApiCompletion<Lnrpc_ListInvoiceResponse>) {
        lndRest.run(method: .get, path: "/v1/invoices", data: nil, completion: completion)
    }
    
    func lookupInvoice(_ request: Lnrpc_PaymentHash, completion: @escaping ApiCompletion<Lnrpc_Invoice>) {
        lndRest.run(method: .get, path: "/v1/invoice/\(request.rHashStr)", data: nil, completion: completion)
    }
    
    func subscribeInvoices(_ request: Lnrpc_InvoiceSubscription, completion: @escaping ApiCompletion<Lnrpc_Invoice>) {
        lndRest.run(method: .get, path: "/v1/invoices/subscribe", data: nil, completion: completion)
    }
    
    func decodePayReq(_ request: Lnrpc_PayReqString, completion: @escaping ApiCompletion<Lnrpc_PayReq>) {
        lndRest.run(method: .get, path: "/v1/payreq/\(request.payReq)", data: nil, completion: completion)
    }
    
    func listPayments(_ request: Lnrpc_ListPaymentsRequest, completion: @escaping ApiCompletion<Lnrpc_ListPaymentsResponse>) {
        lndRest.run(method: .get, path: "/v1/payments", data: nil, completion: completion)
    }
    
    func deleteAllPayments(_ request: Lnrpc_DeleteAllPaymentsRequest, completion: @escaping ApiCompletion<Lnrpc_DeleteAllPaymentsResponse>) {
        lndRest.run(method: .delete, path: "/v1/payments", data: nil, completion: completion)
    }
    
    func describeGraph(_ request: Lnrpc_ChannelGraphRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelGraph>) {
        lndRest.run(method: .get, path: "/v1/graph", data: nil, completion: completion)
    }
    
    func getChanInfo(_ request: Lnrpc_ChanInfoRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelEdge>) {
        lndRest.run(method: .get, path: "/v1/graph/edge/\(request.chanID)", data: nil, completion: completion)
    }
    
    func getNodeInfo(_ request: Lnrpc_NodeInfoRequest, completion: @escaping ApiCompletion<Lnrpc_NodeInfo>) {
        lndRest.run(method: .get, path: "/v1/graph/node/\(request.pubKey)", data: nil, completion: completion)
    }
    
    func queryRoutes(_ request: Lnrpc_QueryRoutesRequest, completion: @escaping ApiCompletion<Lnrpc_QueryRoutesResponse>) {
        lndRest.run(method: .get, path: "/v1/graph/routes/\(request.pubKey)/\(request.amt)", data: nil, completion: completion)
    }
    
    func getNetworkInfo(_ request: Lnrpc_NetworkInfoRequest, completion: @escaping ApiCompletion<Lnrpc_NetworkInfo>) {
        lndRest.run(method: .get, path: "/v1/graph/info", data: nil, completion: completion)
    }
    
    func stopDaemon(_ request: Lnrpc_StopRequest, completion: @escaping ApiCompletion<Lnrpc_StopResponse>) {
        Logger.error("StopDaemon not implemented", customPrefix: "ðŸ“º")
    }
    
    func subscribeChannelGraph(_ request: Lnrpc_GraphTopologySubscription, completion: @escaping ApiCompletion<Lnrpc_GraphTopologyUpdate>) {
        Logger.error("SubscribeChannelGraph not implemented", customPrefix: "ðŸ“º")
    }
    
    func debugLevel(_ request: Lnrpc_DebugLevelRequest, completion: @escaping ApiCompletion<Lnrpc_DebugLevelResponse>) {
        Logger.error("DebugLevel not implemented", customPrefix: "ðŸ“º")
    }
    
    func feeReport(_ request: Lnrpc_FeeReportRequest, completion: @escaping ApiCompletion<Lnrpc_FeeReportResponse>) {
        lndRest.run(method: .get, path: "/v1/fees", data: nil, completion: completion)
    }
    
    func updateChannelPolicy(_ request: Lnrpc_PolicyUpdateRequest, completion: @escaping ApiCompletion<Lnrpc_PolicyUpdateResponse>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/chanpolicy", data: json, completion: completion)
    }
    
    func forwardingHistory(_ request: Lnrpc_ForwardingHistoryRequest, completion: @escaping ApiCompletion<Lnrpc_ForwardingHistoryResponse>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/switch", data: json, completion: completion)
    }
    
    func exportChannelBackup(_ request: Lnrpc_ExportChannelBackupRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelBackup>) {
        lndRest.run(method: .get, path: "/v1/channels/backup/\(request.chanPoint.fundingTxidStr)/\(request.chanPoint.outputIndex)", data: nil, completion: completion)
    }
    
    func exportAllChannelBackups(_ request: Lnrpc_ChanBackupExportRequest, completion: @escaping ApiCompletion<Lnrpc_ChanBackupSnapshot>) {
        lndRest.run(method: .get, path: "/v1/channels/backup", data: nil, completion: completion)
    }
    
    func verifyChanBackup(_ request: Lnrpc_ChanBackupSnapshot, completion: @escaping ApiCompletion<Lnrpc_VerifyChanBackupResponse>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/channels/backup/verify", data: json, completion: completion)
    }
    
    func restoreChannelBackups(_ request: Lnrpc_RestoreChanBackupRequest, completion: @escaping ApiCompletion<Lnrpc_RestoreBackupResponse>) {
        guard let json = try? request.jsonString() else { return }
        lndRest.run(method: .post, path: "/v1/channels/backup/restore", data: json, completion: completion)
    }
    
    func subscribeChannelBackups(_ request: Lnrpc_ChannelBackupSubscription, completion: @escaping ApiCompletion<Lnrpc_ChanBackupSnapshot>) {
        Logger.error("SubscribeChannelBackups not implemented", customPrefix: "ðŸ“º")
    }
    
}
